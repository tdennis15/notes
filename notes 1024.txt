Midterm Monday Week 7, Homework 1-5 Due then. 
Visual studio 2017 Community Ed. 

*****************************
Model -> collection class to hold users (database) -> create instance of user -> in collection 
-> made a controller for user -> model uses collection and controler to make view -> view generates page.
-> controller allowes for CRUD.
*****************************
Strongly Typed View. 
	-Full cycle defined. 
	-Needs HTML helpers 
		"@Html.DisplayNameFor(model => model.FirsOrDefault().FirstName)"
	-Creates a form with defined data types for the inputs as a template

example2-nodb	for class code
reload solution to update code when switching branches
*****************************
NEVER TRUST THE CLIENT, THEY HAVE BAD JUJU!
*****************************
example2-withdb

start with data models and relations. Working with persistant data in a database
User class needs to be mapped with database.
Model class (user.cs) or (database)?

	creating a DB

*local database* //Best practice is to have server (cloud) based databased 
VS 2017 has these functions default (select data tools at install)
App Data -> add new item -> data -> sql server database -> (OurDatabase.mdf) -> add (includes git ignore)
-> server explorer/ sql server object exlorer (left side of workspace) -> right click new query -> define data model
*****************************
sql model example 
all construction should come from a source file, allows for continuous integration and continuous deployment CI/CD

sqlserver (HW 5)

--Users table
CREATE TABLE dbo.Users //table of users has user objects 
(
	ID 	    INT IDENTITY (1,1) NOT NULL,
	FirstName   NVARCHAR(64)       NOT NULL,
	LastName    NvarChar(64)       NOT NULL,
	DOB 	    DateTime           NOT NULL,
	CONSTRAINT  [PK_dbo.Users] PRIMARY KEY CLUSTERED (ID ASC) //name your constraints (upscript and downscript)
);
//saved as db_UP.sql -> app data folder
//up should take it from nothing to where you want to be
//down should remove everything to start from scratch
//Named constraints can be removed by name in the down_script

INSERT INTO dbo.Users (FirstName,LastName,DOB) VALUES
	('Jim','Johnson','2000-08-22 00:00:00'),
	('Sue','Suzanne','2005-11-18 12:22:01');

GO
*****************************
refresh table at the server explorer and show data

Team explorer to help manage the changes and commits (used later)
*****************************
USER MODEL
//created data model, now create user model
//copied from other branch to save keystrokes
//git checkout example2-nodb Models/User.cs
//need to add to project 
//Models -> right click -> add existing item
Need to make a change to user model to fit data model
Add in a primary key
	public int ID {get; set } //not quite finished, will return
//need to restrict string length to avoid crash in Names
*****************************
COLLECTIONS CLASS
->DAL ->Add class -> class -> UserContext.cs -> create

		//DbContext is a class to help with database from entity framework ORM object relational mapper
		//Updated databases and making changes, a wrapper to work with data structures
		//Tools -> NuGet Package Manager -> Manage -> search : entity framework under browse -> v6.1.3 
		//	-> add to example 2 -> install -> accept EULA -> ctrl + . for relationship linking in VS
	public class UserContext : DbContext 
	{
		public Usercontext() : base("name=OurDBContext") //Web.config top level

				//Web.config
				//<connectionStrings>
				// <add name="OurDBContext" connectionString = "(copy from datasource)" provider name=""
		{
			
		}
		
		public virtual DBSet<User> Users {get; set} 
			//DB table of entry type 'User' from models, DBSet lets you access and query 
		
		
	}
*****************************
ADD CONTROLLER
	'generate stuff, call it users' -scot